<% http_verb, path = form_path(questionnaire, current_resource, 'keyword') %>
<style>
  li:before {
    content: none; /* Remove content that looks like bullets */
  }
  .list-group-item {
    padding: 10px 48px;
  }
  #treeview-searchable {
    max-height: 500px;
    overflow: scroll;
  }
  .treeview span.icon {
    width: 0px;
  }
</style>
<p class='lead'>
  Unique Identifier: <%= questionnaire.uuid %>
</p>
<%= simple_form_for(current_resource, as: :keyword, method: http_verb, url: path, remote: true, :html => { :onsubmit => "insertSelectedKeywords()" } )   do |f| %>
  <p class="lead">
    Descriptive Keywords
  </p>
  <p>Current Selections:</p>
  <ul id="current_keywords">
  </ul>
  <%= f.input :questionnaire_id, as: :hidden, input_html: { value: questionnaire.id } %>
  <%= f.label :science_keywords, "Please select at least one science keyword from the following options:" %>
    <%= f.input :science_keywords, as: :hidden, required: true   %>
    <div class='row'>
      <div class="form-row">
        <div class="col-md-4">
          <h2>Search</h2>
          <div class="form-group">
            <label for="input-check-node" class="sr-only">Search Tree:</label>
            <input type="input" class="form-control" id="input-check-node" placeholder="Identify node..." value="EARTH SCIENCE">
          </div>
          <div class="col-md-4 row">
            <div class="form-group">
              <button type="button" class="btn btn-success" id="btn-search">Search Keywords</button>
            </div>
            <div class="form-group">
              <button type="button" class="btn btn-success check-node" id="btn-check-node">Check Keywords</button>
            </div>
            <div class="form-group">
              <button type="button" class="btn btn-danger check-node" id="btn-uncheck-node">Uncheck Keywords</button>
            </div>
          </div>
          <hr>
        </div>
        <div class="col-md-8">
          <h2>Select Keywords</h2>
          <div id="treeview-searchable" class=""></div>
        </div>
      </div>
    </div>
  <%= f.input :ancillary_keywords, label: 'Please provide any other keywords or phrases to further describe the data.' %>
  <br>

  <script type="text/javascript">
    var checkableTree;
    var insertSelectedKeywords = function() {
      const selectedItems = checkableTree.data().treeview.getSelected();
      $('#keyword_science_keywords').val(JSON.stringify(selectedItems));
    };

    $(function() {
      var scienceKeywordsAsNodes = [];
      let currentKeywords = JSON.parse($('#keyword_science_keywords').val());
      let currentKeywordsUuids = currentKeywords.map(ck => ck.uuid);

      var addChildNodes = function(node, category = null, topic = null, term = null, subfield = null) {
        let hasChildNodes = node.subfields;
        let text = node.value;
        let href = `#${text.toLowerCase().replace(' ', '').replace('-', '')}`;
        if (hasChildNodes) {
          let childNodesField = hasChildNodes[0]
          if (childNodesField === 'topic') {
            category = node.value;
          } else if (childNodesField === 'term') {
            topic = node.value;
          } else if (childNodesField.includes('variable_level_')) {
            term = node.value;
            if (childNodesField === 'variable_level_1') {
              subfield = 'VariableLevel1';
            } else if (childNodesField === 'variable_level_2') {
              subfield = 'VariableLevel2';
            } else if (childNodesField === 'variable_level_3') {
              subfield = 'VariableLevel3';
            }
          };
          let childNodes = []
          node[hasChildNodes].forEach((childNode) => {
            childNodes = childNodes.concat(
              addChildNodes(childNode, category, topic, term, subfield)
            );
          });
          let text = node.value;
          return {
            text,
            href,
            selectable: false,
            nodes: childNodes
          }
        } else {
          let childNode = {
            text,
            href,
            uuid: node.uuid,
            Category: category,
            Topic: topic,
            Term: term,
            state: {}
          };
          if (currentKeywordsUuids.includes(node.uuid)) {
            childNode.state.selected = true;
          }
          childNode[subfield] = text;
          return childNode;
        }
        return node;
      }
      var defaultData = [addChildNodes(scienceKeywords.category[0])];

      var search = function(e) {
        var options = {
          ignoreCase: $('#chk-ignore-case').is(':checked'),
          exactMatch: $('#chk-exact-match').is(':checked'),
          revealResults: $('#chk-reveal-results').is(':checked')
        };
        var results = $searchableTree.treeview('search', [ pattern, options ]);

        var output = '<p>' + results.length + ' matches found</p>';
        $.each(results, function (index, result) {
          output += '<p>- ' + result.text + '</p>';
        });
        $('#search-output').html(output);
      }

      $('#btn-clear-search').on('click', function (e) {
        $searchableTree.treeview('clearSearch');
        $('#search-output').html('');
      });

      $('#chk-select-multi:checkbox').on('change', function () {
        console.log('multi-select change');
        selectableNodes = findSelectableNodes();
      });

      // Select/unselect/toggle nodes
      $('#input-select-node').on('keyup', function (e) {
        selectableNodes = findSelectableNodes();
        $('.select-node').prop('disabled', !(selectableNodes.length >= 1));
      });

      $('#btn-select-node.select-node').on('click', function (e) {

        $selectableTree.treeview('selectNode', [ selectableNodes, { silent: $('#chk-select-silent').is(':checked') }]);
      });

      $('#btn-unselect-node.select-node').on('click', function (e) {
        $selectableTree.treeview('unselectNode', [ selectableNodes, { silent: $('#chk-select-silent').is(':checked') }]);
      });

      $('#btn-toggle-selected.select-node').on('click', function (e) {
        $selectableTree.treeview('toggleNodeSelected', [ selectableNodes, { silent: $('#chk-select-silent').is(':checked') }]);
      });

      // Expand/collapse/toggle nodes
      $('#input-expand-node').on('keyup', function (e) {
        expandibleNodes = findExpandibleNodess();
        $('.expand-node').prop('disabled', !(expandibleNodes.length >= 1));
      });

      $('#btn-expand-node.expand-node').on('click', function (e) {
        var levels = $('#select-expand-node-levels').val();
        $expandibleTree.treeview('expandNode', [ expandibleNodes, { levels: levels, silent: $('#chk-expand-silent').is(':checked') }]);
      });

      $('#btn-collapse-node.expand-node').on('click', function (e) {
        $expandibleTree.treeview('collapseNode', [ expandibleNodes, { silent: $('#chk-expand-silent').is(':checked') }]);
      });

      $('#btn-toggle-expanded.expand-node').on('click', function (e) {
        $expandibleTree.treeview('toggleNodeExpanded', [ expandibleNodes, { silent: $('#chk-expand-silent').is(':checked') }]);
      });

      var $checkableTree = $('#treeview-searchable').treeview({
        data: defaultData,
        showIcon: false,
        showCheckbox: false,
        multiSelect: true,
        onNodeSelected: function(event, node) {
          updateSelectedDisplay();
        },
        onNodeUnselected: function (event, node) {
          updateSelectedDisplay();
        }
      });
      checkableTree = $checkableTree;
      var updateSelectedDisplay = function() {
        $('#current_keywords').empty();
        const selectedNodes = checkableTree.data().treeview.getSelected();
        selectedNodes.forEach((keyword) => {
          $('#current_keywords').append(`<li>${keyword.Category} > ${keyword.Topic} > ${keyword.Term} > ${keyword.text}</li>`);
        });
      };
      updateSelectedDisplay();

      var findCheckableNodes = function() {
        return $checkableTree.treeview('search', [ $('#input-check-node').val(), { ignoreCase: false, exactMatch: false } ]);
      };
      var checkableNodes = findCheckableNodes();

      // Check/uncheck/toggle nodes
      $('#btn-search').on('click', function (e) {
        checkableNodes = findCheckableNodes();
        $('.check-node').prop('disabled', !(checkableNodes.length >= 1));
      });

      $('#btn-check-node.check-node').on('click', function (e) {
        $checkableTree.treeview('checkNode', [ checkableNodes, { silent: $('#chk-check-silent').is(':checked') }]);
      });

      $('#btn-uncheck-node.check-node').on('click', function (e) {
        $checkableTree.treeview('uncheckNode', [ checkableNodes, { silent: $('#chk-check-silent').is(':checked') }]);
      });
    });
  </script>
  <%= javascript_tag do %>
    $('#keywords_trigger').addClass('active');
  <% end %>
  <%= render 'form_footer', questionnaire: questionnaire, previous_partial: previous_partial, form: f %>
<% end %>
